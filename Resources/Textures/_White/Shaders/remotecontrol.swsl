//
// https://gamedev.stackexchange.com/a/59808
//
//   Author: sam hocevar
// Answered: Jul 27, 2013 at 13:33
//  License: CC BY-SA 3.0
//

uniform highp float jitter;
uniform highp float colorJitter;
uniform highp float alphaJitter;
uniform highp float hue;

highp vec3 rgb2hsv(highp vec3 c)
{
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    /* float e = 1.0e-10; */
    highp float e = 0.0000000001;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

highp vec3 hsv2rgb(highp vec3 c)
{
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

highp float rng(highp vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

highp vec3 blend(highp vec3 base, highp vec3 color, highp float factor){
	return base+(color-base)*factor;
}

// quick and simple okay-ish looking shader because i don't like the deltaV one.
void fragment() {
	////highp vec3 baseColor = vec3(0.0, 1.0, 0.0);
	//highp float c = 1.0/(15.0*8);
	//highp float stripe = mod(UV.y + TIME*c, c);
	//highp float stripes = step(stripe, c/2.0);
	////baseColor += vec3(0.4*diff, 0, 0.4*diff);
	////COLOR = vec4(baseColor, 0.05);
	//
	//highp float dist = length(UV - vec2(0.5,0.5)) * 2;
	//dist -= 0.5;
	//highp vec4 color = vec4(0.0, 0.5, 0.0, 0.05*dist*0.2);
	////color = vec4(0.0);
	//color += vec4(0.2*(1-stripes), 0.8, 0.2*(1-stripes), 0.05*stripes*dist);
	//COLOR = color;
	
	highp float c = 1.0/(15.0*16);
	highp float stripe = mod(UV.y + TIME*c, c);
	highp float stripes = step(stripe, c/2.0);
	
	COLOR = vec4(0.0, 0.0, 0.0, 0.2*stripes);
}
