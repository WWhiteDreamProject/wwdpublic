using System.Numerics;
using Content.Client.Guidebook;
using Content.Client.Guidebook.Components;
using Content.Shared.Guidebook;
using Content.StyleSheetify.Client.Utils;
using Robust.Client.Animations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Animations;
using Robust.Shared.Prototypes;

namespace Content.Client.UserInterface.Controls
{
    [GenerateTypedNameReferences]
    [Virtual]
    public partial class FancyWindow : BaseWindow
    {
        [Dependency] private readonly IEntitySystemManager _sysMan = default!;
        private GuidebookSystem? _guidebookSystem;
        private const int DRAG_MARGIN_SIZE = 7;
        public const string StyleClassWindowHelpButton = "windowHelpButton";

        private AnimationExtend<Vector2> OpenAnimation;
        private AnimationExtend<float> FadeAnimation;
        private AnimationExtend<float> UnfadeAnimation;

        public FancyWindow()
        {
            RobustXamlLoader.Load(this);

            CloseButton.OnPressed += _ => Close();
            HelpButton.OnPressed += _ => Help();
            XamlChildren = ContentsContainer.Children;

            OpenAnimation = new(
                RecenterWindow,
                this,
                new()
                {
                    InterpolationMode = AnimationInterpolationMode.Cubic,
                    KeyFrames =
                    {
                        new(new Vector2(0.5f,1.2f),0f),
                        new(new Vector2(0.5f,0.4f),0.25f),
                        new(new Vector2(0.5f,0.5f),0.4f)
                    }
                }
                );

            FadeAnimation = new(
                SetVisibility,
                this,
                new()
                {
                    InterpolationMode = AnimationInterpolationMode.Cubic,
                    KeyFrames =
                    {
                        new(1f,0f),
                        new(0f,0.25f),
                        new(0f,0.4f)
                    }
                }
            );

            UnfadeAnimation = new(
                SetVisibility,
                this,
                new()
                {
                    InterpolationMode = AnimationInterpolationMode.Cubic,
                    KeyFrames =
                    {
                        new(0f,0f),
                        new(1f,0.25f),
                        new(1f,0.4f)
                    }
                }
            );
        }

        protected override void Opened()
        {
            base.Opened();
            OpenAnimation.PlayAnimation();
            UnfadeAnimation.PlayAnimation();
        }

        private void FancyClose()
        {
            var pos = (Position + DesiredSize / 2) / Parent!.Size;

            new AnimationExtend<Vector2>(
                RecenterWindow,
                this,
                new()
                {
                    InterpolationMode = AnimationInterpolationMode.Cubic,
                    KeyFrames =
                    {
                        new(new Vector2(pos.X,pos.Y),0f),
                        new(new Vector2(pos.X,0.4f),0.25f),
                        new(new Vector2(pos.X,1.0f),0.4f)
                    }
                }
            ).PlayAnimation();
            FadeAnimation.PlayAnimation();
        }

        private void SetVisibility(float percent)
        {
            Modulate = new(1,1,1,percent);
        }

        public string? Title
        {
            get => WindowTitle.Text;
            set => WindowTitle.Text = value;
        }

        private List<ProtoId<GuideEntryPrototype>>? _helpGuidebookIds;
        public List<ProtoId<GuideEntryPrototype>>? HelpGuidebookIds
        {
            get => _helpGuidebookIds;
            set
            {
                _helpGuidebookIds = value;
                HelpButton.Disabled = _helpGuidebookIds == null;
                HelpButton.Visible = !HelpButton.Disabled;
            }
        }

        public void AppendStyleClass(string styleClass)
        {
            WindowsHeadingBackground.StyleClasses.Add(styleClass);
            WindowsPanelBackground.StyleClasses.Add(styleClass);
            WindowTitle.StyleClasses.Add(styleClass);
            CloseButton.StyleClasses.Add(styleClass);
            HelpButton.StyleClasses.Add(styleClass);
        }

        public void Help()
        {
            if (HelpGuidebookIds is null)
                return;
            _guidebookSystem ??= _sysMan.GetEntitySystem<GuidebookSystem>();
            _guidebookSystem.OpenHelp(HelpGuidebookIds);
        }

        protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
        {
            var mode = DragMode.Move;

            if (Resizable)
            {
                if (relativeMousePos.Y < DRAG_MARGIN_SIZE)
                {
                    mode = DragMode.Top;
                }
                else if (relativeMousePos.Y > Size.Y - DRAG_MARGIN_SIZE)
                {
                    mode = DragMode.Bottom;
                }

                if (relativeMousePos.X < DRAG_MARGIN_SIZE)
                {
                    mode |= DragMode.Left;
                }
                else if (relativeMousePos.X > Size.X - DRAG_MARGIN_SIZE)
                {
                    mode |= DragMode.Right;
                }
            }

            return mode;
        }
    }
}
