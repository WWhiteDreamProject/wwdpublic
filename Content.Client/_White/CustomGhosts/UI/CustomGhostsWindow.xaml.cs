using Content.Client.Lobby;
using Content.Shared._White.CustomGhostSystem;
using Content.Shared.Ghost;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

namespace Content.Client._White.CustomGhosts.UI;

[GenerateTypedNameReferences]
public sealed partial class CustomGhostsWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly ISharedPlayerManager _player  = default!;
    [Dependency] private readonly IClientPreferencesManager _pref = default!;
    [Dependency] private readonly IClientConsoleHost _conhost = default!;

    List<Control> _hidden = new();
    Button _currentActive = default!;

    Dictionary<string, List<CustomGhostPrototype>> _allGhosts = new(); // won't include ghosts that are ckey-locked

    EntProtoId<GhostComponent> _currentGhostProtoId;
    public CustomGhostsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _currentGhostProtoId = _pref.Preferences?.CustomGhost.Id ?? "default";
        ShowAllCheckBox.OnToggled += ToggleVisibility;

        BuildList();
    }

    private void BuildList()
    {
        var allghostprotos = _proto.EnumeratePrototypes<CustomGhostPrototype>();
        allghostprotos = allghostprotos.OrderBy(item => Loc.GetString(item.Name ?? $"custom-ghost-{item.ID}-name"));

        foreach(var ghostProto in allghostprotos)
            _allGhosts.GetOrNew(ghostProto.Category).Add(ghostProto);

        var categories = _allGhosts.Keys.Order();
        foreach (var category in categories)
        {

            var label = AddCategoryLabel(category);
            var ghosts = _allGhosts[category];
            bool allHidden = true;
            List<CustomGhostButton> buttons = new();
            foreach (var ghostProto in ghosts)
                if(AddButton(ghostProto) is CustomGhostButton button) // todo: consider moving AddChild from AddButton to here, to avoid this weird label juggling 
                    buttons.Add(button);                             // also do something about this stupid button visibility double checking

            if (buttons.Count == 0)
            {
                ScrollBox.RemoveChild(label);
                continue;
            }

            if(buttons.All(button => !button.Visible)) // not visible by default means the ghost is locked, and if all ghosts  in a single category are locked, hide that category divider
            {
                label.Visible = false;
                _hidden.Add(label);
            }
        }
    }

    private CustomGhostButton? AddButton(CustomGhostPrototype ghostProto) // is not guaranteed to actually add a button, lol
    {
        bool available = true;

        string fullFailReason = string.Empty;

        if(ghostProto.Restrictions is not null)
            foreach(var restriction in ghostProto.Restrictions)
            {
                if (restriction.CanUse(_player.LocalSession!, out var failReason))
                    continue;

                if (restriction.HideOnFail)
                    return null; // skip button creation

                fullFailReason += $"\n{failReason}";

                available = false;
            }

        var button = new CustomGhostButton();
        button.GhostProtoId = ghostProto.GhostEntityPrototype;
        button.ActualButton.Name = ghostProto.ID;
        button.EntityTextureRects.SetPrototype(ghostProto.GhostEntityPrototype);

        button.EntityLabel.Text = Loc.GetString(ghostProto.Name ??            $"custom-ghost-{ghostProto.ID}-name");
        button.ActualButton.ToolTip = Loc.GetString(ghostProto.Description ?? $"custom-ghost-{ghostProto.ID}-desc");

        if (_currentGhostProtoId == ghostProto.ID)
        {
            button.ActualButton.Pressed = true;
            _currentActive = button.ActualButton;
        }
        button.ActualButton.OnPressed += OnPressed;

        ScrollBox.AddChild(button);

        if (available)
            return button;

        button.Modulate = Color.Red;
        button.Visible = false;
        button.ActualButton.Disabled = true;
        button.ActualButton.ToolTip += $"\n{Loc.GetString("custom-ghost-window-tooltip-to-unlock")}{fullFailReason}";
        _hidden.Add(button);
        return button;
    }

    private Label AddCategoryLabel(string text)
    {
        var label = new Label()
        {
            StyleClasses = { "FancyWindowTitle" }
        };

        label.Text = $"-- {Loc.GetString($"custom-ghost-category-{text}")} --";
        ScrollBox.AddChild(label);
        return label;
    }

    private void OnPressed(Button.ButtonEventArgs args)
    {
        var protoId = args.Button.Name!;
        if (protoId == _currentGhostProtoId)
        {
            args.Button.Pressed = true; // i don't want to figure out how to properly cancel this event, yet
            return;
        }

        if (_currentActive is not null) // can probably end up as a null if the last used customghost was removed?
            _currentActive.Pressed = false;

        _currentGhostProtoId = protoId;
        _currentActive = (Button)args.Button;
        _pref.SetCustomGhost(protoId);
        _conhost.ExecuteCommand($"setcustomghost {CommandParsing.Escape(protoId)}"); // I implemented the commands first as a test, so i'll be using them now. It's dumb, but it works okay.
    }

    private void ToggleVisibility(Button.ButtonToggledEventArgs args)
    {
        foreach(var button in _hidden)
        {
            button.Visible = args.Pressed;
        }
    }

    // shamelessly stolen from EntitySpawnButton
    public sealed class CustomGhostButton : Control
    {
        public EntProtoId<GhostComponent> GhostProtoId { get; set; } = default!;
        public Button ActualButton { get; private set; }
        public Label EntityLabel { get; private set; }
        public EntityPrototypeView EntityTextureRects { get; private set; }

        public CustomGhostButton()
        {
            AddChild(ActualButton = new Button
            {
                ToggleMode = true,
                HorizontalExpand = true
            });

            AddChild(new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Children =
            {
                (EntityTextureRects = new EntityPrototypeView
                {
                    SetSize = new Vector2(32, 32),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    Stretch = SpriteView.StretchMode.Fill
                }),
                (EntityLabel = new Label
                {
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    Text = "sp00ky",
                    ClipText = true
                })
            }
            });
        }
    }
}

