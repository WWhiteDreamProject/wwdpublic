using Content.Client._White.UserInterface.Systems.TargetDoll.Controls;
using Content.Shared._White.TargetDoll;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._White.UserInterface.Systems.TargetDoll.Widgets;

[GenerateTypedNameReferences]
public sealed partial class TargetDollGui : UIWidget
{
    private readonly Dictionary<BodyPart, BodyPartButton?> _bodyPartButtons;

    public TargetDollGui()
    {
        RobustXamlLoader.Load(this);
        var controller = UserInterfaceManager.GetUIController<TargetDollUIController>();

        _bodyPartButtons = new();
        foreach (var bodyPart in Control.BodyParts.Children)
        {
            if (bodyPart is not BodyPartButton bodyPartButton)
                continue;

            bodyPartButton.MouseFilter = MouseFilterMode.Stop;
            bodyPartButton.OnPressed += _ => controller.SelectBodyPart(bodyPartButton.BodyPart);
            bodyPartButton.OnMouseEntered += _ => Control.TextureHovered = bodyPartButton.TextureHovered;
            bodyPartButton.OnMouseExited += _ => Control.TextureHovered = null;
            _bodyPartButtons[bodyPartButton.BodyPart] = bodyPartButton;
        }
    }

    public void OnTargetDollUpdated(BodyPart bodyPart) => Control.TextureFocused = _bodyPartButtons[bodyPart]?.TextureFocused;
}
